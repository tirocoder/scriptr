@{
    ViewBag.Title = "Home Page";
}

@section scripts{
    <script src='@Url.Content("~/Scripts/jquery-migrate.js")' type='text/javascript'></script>
    <script src='@Url.Content("~/Scripts/underscore.js")' type='text/javascript'></script>
    @*<script src='@Url.Content("~/Scripts/elastic.js")' type='text/javascript'></script>*@
    <script src='@Url.Content("~/Scripts/textntags.js")' type='text/javascript'></script>
    <script src='@Url.Content("~/Scripts/randexp.js")' type='text/javascript'></script>
    <script type='text/javascript'>
    $(document).ready(function () {
        var tagCounter = 0;
        var counterArray = new Array();

        //$(".textntags-wrapper .textntags-beautifier > div").css('font-size', $(".tagged_text").css('font-size') + "!important");
        $('textarea.tagged_text').textntags({
            triggers: {
                '#': {
                    uniqueTags: false,
                    minChars: 0,
                    syntax: _.template('#[<%= id %>:<%= type %>:<%= title %>]'),
                    parser: /(#)\[(\d+):([\w\s\.\-]+):([\w\s@(Html.Raw("@"))\.,-\/#!$%\^&\*;:{}=\-_`~()]+)\]/gi,
                    parserGroups: { id: 2, type: 3, title: 4 },
                }
            },
            onDataRequest: function (mode, query, triggerChar, callback) {
                var data = [
                    { id: 1, name: 'date', 'avatar': '@Url.Content("~/Images/icons/date.png")', type: 'date' },
                    { id: 1, name: 'time', 'avatar': '@Url.Content("~/Images/icons/time.png")', type: 'time' },
                    { id: 1, name: 'counter', 'avatar': '@Url.Content("~/Images/icons/shape_align_bottom.png")', type: 'counter' },
                    { id: 2, name: 'int', 'avatar': '@Url.Content("~/Images/icons/text_list_numbers.png")', type: 'int' },
                    { id: 3, name: 'decimal', 'avatar': '@Url.Content("~/Images/icons/text_list_numbers.png")', type: 'decimal' },
                    { id: 4, name: 'regex', 'avatar': '@Url.Content("~/Images/icons/asterisk_orange.png")', type: 'regex' }
                ];

                query = query.toLowerCase();
                var found = _.filter(data, function (item) { return item.name.toLowerCase().indexOf(query) > -1; });

                callback.call(this, found);
            },
            tagsAdded: function (callback) {
                callback.call(e, addedTagsList);
            }
        })
          .bind('tagsAdded.textntags', function (e, addedTagsList) {
              console.log('tagsAdded:' + JSON.stringify(addedTagsList));

              if (addedTagsList[0].type == "regex") {
                  var res = prompt("RegEx: ");
                  addedTagsList[0].value = res;
              }
              if (addedTagsList[0].type == "counter") {
                  var res = prompt("Anfangen mit ... ");
                  addedTagsList[0].startingAt = parseInt(res);
              }
              addedTagsList[0].id = tagCounter;
              tagCounter++;
          });

        $("#btnGenerate").click(function () {
            // reset things
            counterArray = new Array();

            $('textarea.tagged_text').textntags('val', function (text) {
                var output = "", outputRow = "";
                originalText = text;
                var count = parseInt($("#tbCount").val());

                // iterate through all placeholders
                var placeholders = text.match(/#\[[0-9]+\:[a-z]+\:[a-z]+\]/g);

                var rnd;
                for (var i = 0; i < count; i++) {
                    text = originalText;
                    for (var placeholder in placeholders) {
                        try {
                            // RegEx
                            if (placeholders[placeholder].indexOf("regex") > -1) {
                                var id = placeholders[placeholder].replace(/#\[/, "").replace(/\:[a-z]+\:[a-z]+\]/, "");
                                var regex = "";
                                $("textarea.tagged_text").textntags('getTags', function (tags) {
                                    for (var index in tags) {
                                        if (tags[index].id == id) {
                                            regex = tags[index].value;
                                        }
                                    }
                                });
                                rnd = new RandExp(regex).gen();
                                text = text.replace(placeholders[placeholder], rnd);
                            }
                            // int
                            if (placeholders[placeholder].indexOf("int") > -1) {
                                rnd = new RandExp(/[0-9]{1,10}/).gen();
                                text = text.replace(placeholders[placeholder], rnd);
                            }
                            // decimal
                            if (placeholders[placeholder].indexOf("decimal") > -1) {
                                rnd = new RandExp(/[0-9]{1,10}\,[0-9]{2,2}/).gen();
                                text = text.replace(placeholders[placeholder], rnd);
                            }
                            // date
                            if (placeholders[placeholder].indexOf("date") > -1) {
                                rnd = new RandExp(/^(((((0?[1-9])|(1\d)|(2[0-8]))\.((0?[1-9])|(1[0-2])))|((31\.((0[13578])|(1[02])))|((29|30)\.((0?[1,3-9])|(1[0-2])))))\.((20[0-9][0-9]))|(29\.0?2\.20(([02468][048])|([13579][26]))))$/).gen();
                                text = text.replace(placeholders[placeholder], rnd);
                            }
                            // time
                            if (placeholders[placeholder].indexOf("time") > -1) {
                                rnd = new RandExp(/(1[0-2]|0[1-9])(:[0-5]\d){2}/).gen();
                                text = text.replace(placeholders[placeholder], rnd);
                            }
                            // counter
                            if (placeholders[placeholder].indexOf("counter") > -1) {
                                var id = placeholders[placeholder].replace(/#\[/, "").replace(/\:[a-z]+\:[a-z]+\]/, "");
                                var startingAt = 0;
                                $("textarea.tagged_text").textntags('getTags', function (tags) {
                                    for (var index in tags) {
                                        if (tags[index].id == id) {
                                            startingAt = tags[index].startingAt;
                                        }
                                    }
                                });
                                if (counterArray[id] === undefined) {
                                    counterArray[id] = startingAt;
                                }
                                else {
                                    counterArray[id] = counterArray[id] + 1;
                                }
                                text = text.replace(placeholders[placeholder], counterArray[id]);
                            }
                        }
                        catch (e) { }
                    }
                    output += text + "</br>";
                }
                $("#output").html(output);
            });
        });
    });
    </script>
}

<div class="row" style="margin-top: 30px;">
    <div class="col-md-12">
        <h4>Muster eingeben</h4>
        <div class="panel panel-default">
            <div class="panel-body">
<pre>
Info:
#int ... Int32 Zahl
#decimal ... Dezimal-Zahl
#regex ... Regulärer Ausdruck
#date ... Datum (dd.MM.yyyy)
#time ... Uhrzeit
#counter ... Zähler (angefangen mit xxx)
</pre>
            </div>
        </div>
        <textarea style="width:100%;" class='tagged_text' placeholder="Muster eingeben ..."></textarea>

        <hr />

        <div class="form-inline" role="form">
            <div class="form-group">
                <div class="input-group">
                    <div class="input-group-addon">x</div>
                    <input type="number" class="form-control" id="tbCount" placeholder="Anzahl eingeben ..." value="5">
                </div>
            </div>
            <button class="btn btn-primary" id="btnGenerate">Generieren</button>
        </div>
    </div>
</div>
<hr />
<div class="row">
    <div class="col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h3 class="panel-title">Ergebnis</h3>
            </div>
            <div class="panel-body" id="output">

            </div>
        </div>
    </div>
</div>
